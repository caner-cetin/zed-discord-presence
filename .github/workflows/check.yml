name: Check
on:
  push:
  pull_request:

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install rust
        uses: ./.github/actions/install-rust

      - name: check
        uses: ./.github/actions/check

  compile:
    name: compile ${{ matrix.target }}
    runs-on: ${{ matrix.runner  }}
    needs: check
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            archive: tar.gz
            bootstrap: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
            archive: tar.gz
            bootstrap: |
              sudo dpkg --add-architecture arm64
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64 pkg-config
            build_env:
              PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig

          - target: x86_64-apple-darwin
            runner: macos-latest
            archive: tar.gz
            bootstrap: |
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              arch -x86_64 /usr/local/bin/brew install openssl@3
              echo "OPENSSL_DIR=$(/usr/local/bin/brew --prefix openssl@3)" >> $GITHUB_ENV
          - target: aarch64-apple-darwin
            runner: macos-latest
            archive: tar.gz
            bootstrap: echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            archive: zip
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install rust
        uses: ./.github/actions/install-rust
        with:
          targets: "${{ matrix.target }}"

      - name: bootstrap
        if: ${{ matrix.bootstrap != '' }}
        run: ${{ matrix.bootstrap }}

      - name: build binary
        env: ${{ matrix.build_env }}
        run: cargo build -p discord-presence-lsp --verbose --locked --release --target ${{ matrix.target }}
